{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Chart } from 'chart.js';\nimport { HttpHeaders } from '@angular/common/http';\nexport let DefaultDashboardComponent = class DefaultDashboardComponent {\n  constructor(http) {\n    this.http = http;\n    this.labeldata = [];\n    this.taskCounts = {};\n    this.projectCounts = {};\n    this.chartLabels = [];\n    this.chartData = [];\n  }\n  ngOnInit() {\n    // Retrieve token from sessionStorage\n    const token = JSON.parse(sessionStorage.getItem('key')).token;\n    // Set Authorization header with token\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    // Make HTTP GET request to fetch project details\n    this.http.get('http://localhost:8083/api/project/details', {\n      headers,\n      responseType: 'json'\n    }).subscribe(response => {\n      console.log(response);\n      // Store project data in sessionStorage\n      sessionStorage.setItem('projectkey', JSON.stringify(response));\n      // Initialize projectCounts object to store counts by status\n      this.projectCounts = {\n        COMPLETED: 0,\n        IN_PROGRESS: 0,\n        ON_HOLD: 0\n      };\n      // Loop through each project in the response\n      response.forEach(project => {\n        // Increment the count for the corresponding status\n        if (project.status in this.projectCounts) {\n          this.projectCounts[project.status]++;\n        }\n      });\n      // Initialize empty arrays to store chart labels and data\n      this.chartLabels = [];\n      this.chartData = [];\n      // Loop through each status in the projectCounts object\n      Object.keys(this.projectCounts).forEach(status => {\n        // Push the status (e.g., COMPLETED, IN_PROGRESS, ON_HOLD) to chartLabels array\n        this.chartLabels.push(status);\n        // Push the count of projects with this status to chartData array\n        this.chartData.push(this.projectCounts[status]);\n      });\n      // Render the pie chart after processing all projects\n      this.renderPieChart();\n      // Initialize an empty object to store task counts by status\n      const projectData = JSON.parse(sessionStorage.getItem('projectkey'));\n      const taskCounts = {\n        COMPLETED: 0,\n        IN_PROGRESS: 0,\n        ON_HOLD: 0\n      };\n      // Loop through each project in the response\n      projectData.forEach(project => {\n        // Loop through each task in the project\n        project.tasks.forEach(task => {\n          // Increment the count for the corresponding status\n          if (task.status in taskCounts) {\n            taskCounts[task.status]++;\n          }\n        });\n      });\n      // Initialize empty arrays to store chart labels and data\n      const chartlabel = Object.keys(taskCounts);\n      const chartdata = Object.values(taskCounts);\n      // Render the pie chart\n      this.renderTaskPieChart(chartlabel, chartdata);\n    }, error => {\n      console.error('Error fetching project details:', error);\n    });\n  }\n  renderPieChart() {\n    const ctx = document.getElementById('pieChart');\n    const pieChart = new Chart(ctx, {\n      type: 'pie',\n      data: {\n        labels: this.chartLabels,\n        datasets: [{\n          label: 'Project Status',\n          data: this.chartData,\n          backgroundColor: ['rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(255, 206, 86, 0.5)' // ON_HOLD\n          ],\n\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)'],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    });\n  }\n  renderTaskPieChart(labels, data) {\n    const ctx = document.getElementById('taskpieChart');\n    const pieChart = new Chart(ctx, {\n      type: 'pie',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Task Status',\n          data: data,\n          backgroundColor: ['rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(255, 206, 86, 0.5)' // ON_HOLD\n          ],\n\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)'],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    });\n  }\n};\nDefaultDashboardComponent = __decorate([Component({\n  selector: 'app-default-dashboard',\n  templateUrl: './default-dashboard.component.html',\n  styleUrls: ['./default-dashboard.component.css']\n})], DefaultDashboardComponent);","map":{"version":3,"names":["Component","Chart","HttpHeaders","DefaultDashboardComponent","constructor","http","labeldata","taskCounts","projectCounts","chartLabels","chartData","ngOnInit","token","JSON","parse","sessionStorage","getItem","headers","get","responseType","subscribe","response","console","log","setItem","stringify","COMPLETED","IN_PROGRESS","ON_HOLD","forEach","project","status","Object","keys","push","renderPieChart","projectData","tasks","task","chartlabel","chartdata","values","renderTaskPieChart","error","ctx","document","getElementById","pieChart","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Purini Tharishith\\Desktop\\project3\\Page\\src\\app\\modules\\manager\\default-dashboard\\default-dashboard.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Chart } from 'chart.js';\nimport { HttpClient ,HttpHeaders} from '@angular/common/http';\n@Component({\n  selector: 'app-default-dashboard',\n  templateUrl: './default-dashboard.component.html',\n  styleUrls: ['./default-dashboard.component.css']\n})\nexport class DefaultDashboardComponent {\n  chartdata : any ;\n  labeldata: any[]=[];\n  taskCounts: any = {};\n  projectCounts : any = {};\n\n  chartLabels = [];\n  chartData = [];\n  constructor(private http:HttpClient){}\n  ngOnInit(): void {\n    // Retrieve token from sessionStorage\n    const token = JSON.parse(sessionStorage.getItem('key')).token;\n    \n    // Set Authorization header with token\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n  \n    // Make HTTP GET request to fetch project details\n    this.http.get<any[]>('http://localhost:8083/api/project/details', { headers, responseType: 'json' }).subscribe(\n      (response) => {\n        console.log(response);\n        \n        // Store project data in sessionStorage\n        sessionStorage.setItem('projectkey', JSON.stringify(response));\n        \n        // Initialize projectCounts object to store counts by status\n        this.projectCounts = {\n          COMPLETED: 0,\n          IN_PROGRESS: 0,\n          ON_HOLD: 0\n        };\n  \n        // Loop through each project in the response\n        response.forEach(project => {\n          // Increment the count for the corresponding status\n          if (project.status in this.projectCounts) {\n            this.projectCounts[project.status]++;\n          }\n        });\n  \n        // Initialize empty arrays to store chart labels and data\n        this.chartLabels = [];\n        this.chartData = [];\n  \n        // Loop through each status in the projectCounts object\n        Object.keys(this.projectCounts).forEach(status => {\n          // Push the status (e.g., COMPLETED, IN_PROGRESS, ON_HOLD) to chartLabels array\n          this.chartLabels.push(status);\n          \n          // Push the count of projects with this status to chartData array\n          this.chartData.push(this.projectCounts[status]);\n        });\n  \n        // Render the pie chart after processing all projects\n        this.renderPieChart();\n\n\n          // Initialize an empty object to store task counts by status\n  const projectData = JSON.parse(sessionStorage.getItem('projectkey'));\n  const taskCounts = {\n    COMPLETED: 0,\n    IN_PROGRESS: 0,\n    ON_HOLD: 0\n  };\n\n  // Loop through each project in the response\n  projectData.forEach(project => {\n    // Loop through each task in the project\n    project.tasks.forEach(task => {\n      // Increment the count for the corresponding status\n      if (task.status in taskCounts) {\n        taskCounts[task.status]++;\n      }\n    });\n  });\n\n  // Initialize empty arrays to store chart labels and data\n  const chartlabel = Object.keys(taskCounts);\n  const chartdata = Object.values(taskCounts);\n\n  // Render the pie chart\n  this.renderTaskPieChart(chartlabel, chartdata);\n      },\n      (error) => {\n        console.error('Error fetching project details:', error);\n      }\n    );\n  }\n  \n  renderPieChart() {\n    const ctx = document.getElementById('pieChart') as HTMLCanvasElement;\n    const pieChart = new Chart(ctx, {\n      type: 'pie',\n      data: {\n        labels: this.chartLabels,\n        datasets: [{\n          label: 'Project Status',\n          data: this.chartData,\n          backgroundColor: [\n            'rgba(255, 99, 132, 0.5)', // COMPLETED\n            'rgba(54, 162, 235, 0.5)', // IN_PROGRESS\n            'rgba(255, 206, 86, 0.5)', // ON_HOLD\n          ],\n          borderColor: [\n            'rgba(255, 99, 132, 1)',\n            'rgba(54, 162, 235, 1)',\n            'rgba(255, 206, 86, 1)',\n          ],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    });\n  }\n\n  renderTaskPieChart(labels: string[], data: number[]) {\n    const ctx = document.getElementById('taskpieChart') as HTMLCanvasElement;\n    const pieChart = new Chart(ctx, {\n      type: 'pie',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Task Status',\n          data: data,\n          backgroundColor: [\n            'rgba(255, 99, 132, 0.5)', // COMPLETED\n            'rgba(54, 162, 235, 0.5)', // IN_PROGRESS\n            'rgba(255, 206, 86, 0.5)', // ON_HOLD\n          ],\n          borderColor: [\n            'rgba(255, 99, 132, 1)',\n            'rgba(54, 162, 235, 1)',\n            'rgba(255, 206, 86, 1)',\n          ],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    });\n}\n}\n  \n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}