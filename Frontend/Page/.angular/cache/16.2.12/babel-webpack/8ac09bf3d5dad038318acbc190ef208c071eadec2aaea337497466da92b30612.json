{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared-data.service\";\nexport class MasterInterceptor {\n  constructor(sharedData) {\n    this.sharedData = sharedData;\n  }\n  intercept(request, next) {\n    const allowRequest1 = \"http://localhost:8082/api/signup\";\n    const allowRequest2 = \"http://localhost:8082/api/signin\";\n    if (request.url == allowRequest1 || request.url == allowRequest2) {\n      return next.handle(request);\n    } else {\n      const sessionData = sessionStorage.getItem('key');\n      if (sessionData) {\n        this.token = JSON.parse(sessionStorage.getItem('key')).token;\n        this.cloneRequestcloneRequest = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${this.token}`\n          }\n        });\n        return next.handle(cloneRequest);\n      }\n    }\n  }\n  static #_ = this.ɵfac = function MasterInterceptor_Factory(t) {\n    return new (t || MasterInterceptor)(i0.ɵɵinject(i1.SharedDataService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MasterInterceptor,\n    factory: MasterInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["MasterInterceptor","constructor","sharedData","intercept","request","next","allowRequest1","allowRequest2","url","handle","sessionData","sessionStorage","getItem","token","JSON","parse","cloneRequestcloneRequest","clone","setHeaders","Authorization","cloneRequest","_","i0","ɵɵinject","i1","SharedDataService","_2","factory","ɵfac"],"sources":["C:\\Users\\Purini Tharishith\\Desktop\\project3\\Page\\src\\app\\service\\master.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { SharedDataService } from '../shared-data.service';\n@Injectable()\nexport class MasterInterceptor implements HttpInterceptor {\n\n  constructor(private sharedData :SharedDataService) {}\n  token : any;\n  cloneRequest:any;\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n\n    const allowRequest1=\"http://localhost:8082/api/signup\";\n    const allowRequest2=\"http://localhost:8082/api/signin\";\n    if(request.url==allowRequest1 || request.url==allowRequest2){\n      return next.handle(request);\n    }\n    else{\n    \n    const sessionData = sessionStorage.getItem('key');\n    if(sessionData){this.token = JSON.parse(sessionStorage.getItem('key')).token\n    this.cloneRequestcloneRequest=request.clone({\n      setHeaders:{\n        Authorization:`Bearer ${this.token}`\n      }\n    })\n  \n    return next.handle(cloneRequest);\n  \n  \n    }\n  \n  }\n}\n\n"],"mappings":";;AAUA,OAAM,MAAOA,iBAAiB;EAE5BC,YAAoBC,UAA6B;IAA7B,KAAAA,UAAU,GAAVA,UAAU;EAAsB;EAGpDC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IAExD,MAAMC,aAAa,GAAC,kCAAkC;IACtD,MAAMC,aAAa,GAAC,kCAAkC;IACtD,IAAGH,OAAO,CAACI,GAAG,IAAEF,aAAa,IAAIF,OAAO,CAACI,GAAG,IAAED,aAAa,EAAC;MAC1D,OAAOF,IAAI,CAACI,MAAM,CAACL,OAAO,CAAC;KAC5B,MACG;MAEJ,MAAMM,WAAW,GAAGC,cAAc,CAACC,OAAO,CAAC,KAAK,CAAC;MACjD,IAAGF,WAAW,EAAC;QAAC,IAAI,CAACG,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACJ,cAAc,CAACC,OAAO,CAAC,KAAK,CAAC,CAAC,CAACC,KAAK;QAC5E,IAAI,CAACG,wBAAwB,GAACZ,OAAO,CAACa,KAAK,CAAC;UAC1CC,UAAU,EAAC;YACTC,aAAa,EAAC,UAAU,IAAI,CAACN,KAAK;;SAErC,CAAC;QAEF,OAAOR,IAAI,CAACI,MAAM,CAACW,YAAY,CAAC;;;EAMpC;EAAC,QAAAC,CAAA,G;qBA5BYrB,iBAAiB,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,iBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAjB1B,iBAAiB;IAAA2B,OAAA,EAAjB3B,iBAAiB,CAAA4B;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}