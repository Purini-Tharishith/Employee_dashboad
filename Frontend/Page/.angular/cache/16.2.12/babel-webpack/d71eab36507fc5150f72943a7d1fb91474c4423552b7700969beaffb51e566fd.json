{"ast":null,"code":"export const preRouteGuard = (route, state) => {\n  //  console.log('pre-routeGuard is called');\n  // // const router = inject(Router);\n  // // const sharedDataService = new SharedDataService();\n  // // const token = sharedDataService.getToken();\n  // // console.log(token);\n  // // if(token){\n  // //   return true;\n  // // }\n  // // else{\n  // //   router.navigateByUrl('/login')\n  // //   return false;\n  // // }\n  // const sharedDataService = new SharedDataService(); // Instantiate SharedDataService\n  // const token = sharedDataService.getToken(); // Get token from SharedDataService\n  // if (token) {\n  //   return true;\n  // } else {\n  //   const router = new Router(); // Instantiate Router\n  //   router.navigateByUrl('/login'); // Navigate to login page\n  return false;\n};\n;","map":{"version":3,"names":["preRouteGuard","route","state"],"sources":["C:\\Users\\Purini Tharishith\\Desktop\\project3\\Page\\src\\app\\pre-route.guard.ts"],"sourcesContent":["import { CanActivateFn, ActivatedRouteSnapshot, RouterStateSnapshot ,Router} from '@angular/router';\nimport { SharedDataService } from './shared-data.service';\n\nexport const preRouteGuard: CanActivateFn = (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {\n  \n  //  console.log('pre-routeGuard is called');\n  // // const router = inject(Router);\n  // // const sharedDataService = new SharedDataService();\n  // // const token = sharedDataService.getToken();\n  // // console.log(token);\n  // // if(token){\n  // //   return true;\n  // // }\n  // // else{\n  // //   router.navigateByUrl('/login')\n  // //   return false;\n  // // }\n\n  // const sharedDataService = new SharedDataService(); // Instantiate SharedDataService\n  // const token = sharedDataService.getToken(); // Get token from SharedDataService\n\n  // if (token) {\n  //   return true;\n  // } else {\n  //   const router = new Router(); // Instantiate Router\n  //   router.navigateByUrl('/login'); // Navigate to login page\n    return false;\n  }\n};\n\n\n"],"mappings":"AAGA,OAAO,MAAMA,aAAa,GAAkBA,CAACC,KAA6B,EAAEC,KAA0B,KAAI;EAExG;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACE,OAAO,KAAK;AACd,CAAC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}