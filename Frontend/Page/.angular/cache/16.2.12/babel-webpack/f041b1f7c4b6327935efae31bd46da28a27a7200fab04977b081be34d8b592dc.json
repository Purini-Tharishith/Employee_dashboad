{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nexport let MasterInterceptor = class MasterInterceptor {\n  constructor(shar) {\n    this.shar = shar;\n  }\n  intercept(request, next) {\n    const allowRequest1 = \"http://localhost:8082/api/signup\";\n    const allowRequest2 = \"http://localhost:8082/api/signin\";\n    if (request.url == allowRequest1 || request.url == allowRequest2) {\n      return next.handle(request);\n    } else {\n      let loggedUserData;\n      let localdata = sessionStorage.getItem('key');\n      if (localdata != null) {\n        loggedUserData = JSON.parse(localdata);\n      }\n      const cloneRequest = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${loggedUserData.token}`\n        }\n      });\n      return next.handle(cloneRequest);\n    }\n  }\n};\nMasterInterceptor = __decorate([Injectable()], MasterInterceptor);","map":{"version":3,"names":["Injectable","MasterInterceptor","constructor","shar","intercept","request","next","allowRequest1","allowRequest2","url","handle","loggedUserData","localdata","sessionStorage","getItem","JSON","parse","cloneRequest","clone","setHeaders","Authorization","token","__decorate"],"sources":["C:\\Users\\Purini Tharishith\\Desktop\\project3\\Page\\src\\app\\service\\master.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { SharedDataService } from '../shared-data.service';\n@Injectable()\nexport class MasterInterceptor implements HttpInterceptor {\n\n  constructor(private shar) {}\n  \n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n\n    const allowRequest1=\"http://localhost:8082/api/signup\";\n    const allowRequest2=\"http://localhost:8082/api/signin\";\n    if(request.url==allowRequest1 || request.url==allowRequest2){\n      return next.handle(request);\n    }\n    else{\n      let loggedUserData:any;\n    let localdata=sessionStorage.getItem('key');\n    if(localdata!=null){\n      loggedUserData=JSON.parse(localdata);\n    }\n    const cloneRequest=request.clone({\n      setHeaders:{\n        Authorization:`Bearer ${loggedUserData.token}`\n      }\n    })\n    return next.handle(cloneRequest);\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAUnC,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAE5BC,YAAoBC,IAAI;IAAJ,KAAAA,IAAI,GAAJA,IAAI;EAAG;EAE3BC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IAExD,MAAMC,aAAa,GAAC,kCAAkC;IACtD,MAAMC,aAAa,GAAC,kCAAkC;IACtD,IAAGH,OAAO,CAACI,GAAG,IAAEF,aAAa,IAAIF,OAAO,CAACI,GAAG,IAAED,aAAa,EAAC;MAC1D,OAAOF,IAAI,CAACI,MAAM,CAACL,OAAO,CAAC;KAC5B,MACG;MACF,IAAIM,cAAkB;MACxB,IAAIC,SAAS,GAACC,cAAc,CAACC,OAAO,CAAC,KAAK,CAAC;MAC3C,IAAGF,SAAS,IAAE,IAAI,EAAC;QACjBD,cAAc,GAACI,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC;;MAEtC,MAAMK,YAAY,GAACZ,OAAO,CAACa,KAAK,CAAC;QAC/BC,UAAU,EAAC;UACTC,aAAa,EAAC,UAAUT,cAAc,CAACU,KAAK;;OAE/C,CAAC;MACF,OAAOf,IAAI,CAACI,MAAM,CAACO,YAAY,CAAC;;EAElC;CACD;AAzBYhB,iBAAiB,GAAAqB,UAAA,EAD7BtB,UAAU,EAAE,C,EACAC,iBAAiB,CAyB7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}