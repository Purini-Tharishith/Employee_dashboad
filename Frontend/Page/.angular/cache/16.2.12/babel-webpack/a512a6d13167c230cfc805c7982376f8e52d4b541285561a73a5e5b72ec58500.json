{"ast":null,"code":"import { Chart } from 'chart.js';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DefaultDashboardComponent {\n  constructor(http) {\n    this.http = http;\n    this.labeldata = [];\n    this.taskCounts = {};\n    this.projectCounts = {};\n    this.chartLabels = [];\n    this.chartData = [];\n  }\n  ngOnInit() {\n    const token = JSON.parse(sessionStorage.getItem('key')).token;\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    this.http.get('http://localhost:8083/api/project/details', {\n      headers,\n      responseType: 'json'\n    }).subscribe(response => {\n      console.log(response);\n      sessionStorage.setItem('projectkey', JSON.stringify(response));\n      // Parse project data from sessionStorage\n      this.chartdata = JSON.parse(sessionStorage.getItem('projectkey'));\n      // Initialize an empty object to store project counts by status\n      this.projectCounts = {\n        COMPLETED: 0,\n        IN_PROGRESS: 0,\n        ON_HOLD: 0\n      };\n      // Loop through each project in chartdata array\n      this.chartdata.forEach(project => {\n        // Increment the count for the corresponding status\n        if (project.status in this.projectCounts) {\n          this.projectCounts[project.status]++;\n        }\n      });\n      // Initialize empty arrays to store chart labels and data\n      this.chartLabels = [];\n      this.chartData = [];\n      // Loop through each status in the projectCounts object\n      Object.keys(this.projectCounts).forEach(status => {\n        // Push the status (e.g., COMPLETED, IN_PROGRESS, ON_HOLD) to chartLabels array\n        this.chartLabels.push(status);\n        // Push the count of projects with this status to chartData array\n        this.chartData.push(this.projectCounts[status]);\n      });\n      // Render the pie chart\n      this.renderPieChart();\n    }, renderPieChart(), {\n      const: ctx = document.getElementById('pieChart'),\n      const: pieChart = new Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: this.chartLabels,\n          datasets: [{\n            label: 'Project Status',\n            data: this.chartData,\n            backgroundColor: ['rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(255, 206, 86, 0.5)' // ON_HOLD\n            ],\n\n            borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      })\n    });\n  }\n  static #_ = this.ɵfac = function DefaultDashboardComponent_Factory(t) {\n    return new (t || DefaultDashboardComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DefaultDashboardComponent,\n    selectors: [[\"app-default-dashboard\"]],\n    decls: 2,\n    vars: 0,\n    consts: [[\"id\", \"pieChart\", \"width\", \"400\", \"height\", \"400\"]],\n    template: function DefaultDashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelement(1, \"canvas\", 0);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Chart","HttpHeaders","DefaultDashboardComponent","constructor","http","labeldata","taskCounts","projectCounts","chartLabels","chartData","ngOnInit","token","JSON","parse","sessionStorage","getItem","headers","get","responseType","subscribe","response","console","log","setItem","stringify","chartdata","COMPLETED","IN_PROGRESS","ON_HOLD","forEach","project","status","Object","keys","push","renderPieChart","const","ctx","document","getElementById","pieChart","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","_","i0","ɵɵdirectiveInject","i1","HttpClient","_2","selectors","decls","vars","consts","template","DefaultDashboardComponent_Template","rf","ɵɵelementStart","ɵɵelement","ɵɵelementEnd"],"sources":["C:\\Users\\Purini Tharishith\\Desktop\\project3\\Page\\src\\app\\modules\\manager\\default-dashboard\\default-dashboard.component.ts","C:\\Users\\Purini Tharishith\\Desktop\\project3\\Page\\src\\app\\modules\\manager\\default-dashboard\\default-dashboard.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Chart } from 'chart.js';\nimport { HttpClient ,HttpHeaders} from '@angular/common/http';\n@Component({\n  selector: 'app-default-dashboard',\n  templateUrl: './default-dashboard.component.html',\n  styleUrls: ['./default-dashboard.component.css']\n})\nexport class DefaultDashboardComponent {\n  chartdata : any ;\n  labeldata: any[]=[];\n  taskCounts: any = {};\n  projectCounts : any = {};\n\n  chartLabels = [];\n  chartData = [];\n  constructor(private http:HttpClient){}\n  ngOnInit(): void {\n\n    const token = JSON.parse(sessionStorage.getItem('key')).token;\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    this.http.get<any[]>('http://localhost:8083/api/project/details',{headers,responseType:'json'}).subscribe((response)=>{\n      console.log(response);\n      sessionStorage.setItem('projectkey',JSON.stringify(response));\n    // Parse project data from sessionStorage\n    this.chartdata = JSON.parse(sessionStorage.getItem('projectkey'));\n  \n    // Initialize an empty object to store project counts by status\n    this.projectCounts = {\n      COMPLETED: 0,\n      IN_PROGRESS: 0,\n      ON_HOLD: 0\n    };\n  \n    // Loop through each project in chartdata array\n    this.chartdata.forEach(project => {\n      // Increment the count for the corresponding status\n      if (project.status in this.projectCounts) {\n        this.projectCounts[project.status]++;\n      }\n    });\n  \n    // Initialize empty arrays to store chart labels and data\n    this.chartLabels = [];\n    this.chartData = [];\n  \n    // Loop through each status in the projectCounts object\n    Object.keys(this.projectCounts).forEach(status => {\n      // Push the status (e.g., COMPLETED, IN_PROGRESS, ON_HOLD) to chartLabels array\n      this.chartLabels.push(status);\n      \n      // Push the count of projects with this status to chartData array\n      this.chartData.push(this.projectCounts[status]);\n    });\n  \n    // Render the pie chart\n    this.renderPieChart();\n  }\n  \n  renderPieChart() {\n    const ctx = document.getElementById('pieChart') as HTMLCanvasElement;\n    const pieChart = new Chart(ctx, {\n      type: 'pie',\n      data: {\n        labels: this.chartLabels,\n        datasets: [{\n          label: 'Project Status',\n          data: this.chartData,\n          backgroundColor: [\n            'rgba(255, 99, 132, 0.5)', // COMPLETED\n            'rgba(54, 162, 235, 0.5)', // IN_PROGRESS\n            'rgba(255, 206, 86, 0.5)', // ON_HOLD\n          ],\n          borderColor: [\n            'rgba(255, 99, 132, 1)',\n            'rgba(54, 162, 235, 1)',\n            'rgba(255, 206, 86, 1)',\n          ],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    });\n  }\n\n  \n","<div>\n<canvas id=\"pieChart\" width=\"400\" height=\"400\"></canvas>\n</div>\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}