{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nexport let UpdateTaskComponent = class UpdateTaskComponent {\n  constructor(http) {\n    this.http = http;\n    this.projects = []; // Populate this array with your project data\n    this.updateClicked = false;\n  }\n  ngOnInit() {}\n  updateTaskStatus() {\n    //  this.updateClicked = true;\n    if (this.selectedProject && this.selectedTaskStatus) {\n      const token = JSON.parse(sessionStorage.getItem('key')).token;\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n      // Iterate over tasks to update status\n      this.selectedProject.tasks.forEach(task => {\n        // Make HTTP POST request to update task status\n        this.http.post(`http://localhost:8083/api/task/status/${task.task_id}`, {\n          status: this.selectedTaskStatus\n        }, {\n          headers\n        }).subscribe(response => {\n          console.log('Task status updated successfully:', response);\n          // Handle response if needed\n        }, error => {\n          console.error('Error updating task status:', error);\n          // Handle error if needed\n        });\n      });\n    } else {\n      console.error('No project selected or task status not selected.');\n      // Handle case where no project is selected or task status is not selected\n    }\n  }\n};\n\nUpdateTaskComponent = __decorate([Component({\n  selector: 'app-update-task',\n  templateUrl: './update-task.component.html',\n  styleUrls: ['./update-task.component.css']\n})], UpdateTaskComponent);","map":{"version":3,"names":["Component","HttpHeaders","UpdateTaskComponent","constructor","http","projects","updateClicked","ngOnInit","updateTaskStatus","selectedProject","selectedTaskStatus","token","JSON","parse","sessionStorage","getItem","headers","tasks","forEach","task","post","task_id","status","subscribe","response","console","log","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Purini Tharishith\\Desktop\\project3\\Page\\src\\app\\modules\\manager\\update-task\\update-task.component.ts"],"sourcesContent":["import { Component,OnInit} from '@angular/core';\nimport { HttpClient ,HttpHeaders} from '@angular/common/http';\n@Component({\n  selector: 'app-update-task',\n  templateUrl: './update-task.component.html',\n  styleUrls: ['./update-task.component.css']\n})\nexport class UpdateTaskComponent implements OnInit{\n  \n  projects: any[] = []; // Populate this array with your project data\n  updateClicked = false;\n  selectedProject: any;\n  selectedTaskStatus: string;\n  taskId:number;\n  taskStatus:string;\n  constructor(private http: HttpClient){}\n  ngOnInit(): void {\n  }\n  updateTaskStatus()\n  {  \n //  this.updateClicked = true;\n   if (this.selectedProject && this.selectedTaskStatus) {\n     const token = JSON.parse(sessionStorage.getItem('key')).token;\n     const headers = new HttpHeaders({\n       'Authorization': `Bearer ${token}`\n     });\n\n     // Iterate over tasks to update status\n     this.selectedProject.tasks.forEach(task => {\n       // Make HTTP POST request to update task status\n       this.http.post<any>(`http://localhost:8083/api/task/status/${task.task_id}`, { status: this.selectedTaskStatus }, { headers })\n         .subscribe(\n           (response) => {\n             console.log('Task status updated successfully:', response);\n             // Handle response if needed\n           },\n           (error) => {\n             console.error('Error updating task status:', error);\n             // Handle error if needed\n           }\n         );\n     });\n   } else {\n     console.error('No project selected or task status not selected.');\n     // Handle case where no project is selected or task status is not selected\n   }\n }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAc,eAAe;AAC/C,SAAqBC,WAAW,QAAO,sBAAsB;AAMtD,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAQ9BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IANxB,KAAAC,QAAQ,GAAU,EAAE,CAAC,CAAC;IACtB,KAAAC,aAAa,GAAG,KAAK;EAKiB;EACtCC,QAAQA,CAAA,GACR;EACAC,gBAAgBA,CAAA;IAEjB;IACE,IAAI,IAAI,CAACC,eAAe,IAAI,IAAI,CAACC,kBAAkB,EAAE;MACnD,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,KAAK,CAAC,CAAC,CAACJ,KAAK;MAC7D,MAAMK,OAAO,GAAG,IAAIf,WAAW,CAAC;QAC9B,eAAe,EAAE,UAAUU,KAAK;OACjC,CAAC;MAEF;MACA,IAAI,CAACF,eAAe,CAACQ,KAAK,CAACC,OAAO,CAACC,IAAI,IAAG;QACxC;QACA,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAM,yCAAyCD,IAAI,CAACE,OAAO,EAAE,EAAE;UAAEC,MAAM,EAAE,IAAI,CAACZ;QAAkB,CAAE,EAAE;UAAEM;QAAO,CAAE,CAAC,CAC3HO,SAAS,CACPC,QAAQ,IAAI;UACXC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEF,QAAQ,CAAC;UAC1D;QACF,CAAC,EACAG,KAAK,IAAI;UACRF,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;UACnD;QACF,CAAC,CACF;MACL,CAAC,CAAC;KACH,MAAM;MACLF,OAAO,CAACE,KAAK,CAAC,kDAAkD,CAAC;MACjE;;EAEJ;CACA;;AAxCYzB,mBAAmB,GAAA0B,UAAA,EAL/B5B,SAAS,CAAC;EACT6B,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,C,EACW7B,mBAAmB,CAwC/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}