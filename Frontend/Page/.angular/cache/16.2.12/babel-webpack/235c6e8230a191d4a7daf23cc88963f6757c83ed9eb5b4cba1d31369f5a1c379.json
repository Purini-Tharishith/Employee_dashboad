{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { timer } from 'rxjs';\nimport { map, takeWhile } from 'rxjs/operators';\nexport let LoginComponent = class LoginComponent {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.invalidCredential = false;\n  }\n  ngOnInit() {\n    this.loginForm = new FormGroup({\n      \"email\": new FormControl(null, [Validators.required, Validators.email]),\n      \"password\": new FormControl(null, [Validators.required, Validators.minLength(8), Validators.maxLength(12)])\n    });\n  }\n  login() {\n    if (this.loginForm.valid) {\n      this.http.post(\"http://localhost:8082/api/signin\", this.loginForm.value, {\n        responseType: 'json'\n      }).subscribe({\n        next: data => {\n          console.log(data);\n          this.invalidCredential = false;\n          sessionStorage.setItem('key', JSON.stringify(data));\n          console.log(JSON.parse(sessionStorage.getItem('key')).user_id);\n          if (data.status == true) {\n            if (data.authority == \"[USER]\") {\n              // Navigate to the dashboard page\n              this.router.navigateByUrl('/dashboard');\n            } else if (data.authority == \"[ADMIN]\") {\n              this.router.navigateByUrl('/admindashboard');\n            }\n            // this.startSessionTimer();\n            else {\n              this.router.navigateByUrl('/managerdashboard');\n            }\n          }\n        },\n        error: error => {\n          this.invalidCredential = true;\n        }\n      });\n    }\n  }\n  ClickOnLogin() {\n    if (this.loginForm.valid) {\n      this.login();\n      console.log(this.loginForm);\n    } else {\n      this.invalidCredential = true;\n    }\n  }\n  startSessionTimer() {\n    const sessionDuration = 1 * 60 * 1000; // 30 minutes in milliseconds\n    const sessionExpiry = new Date().getTime() + sessionDuration;\n    this.sessionTimer$ = timer(0, 1000).pipe(map(() => sessionExpiry - new Date().getTime()), takeWhile(timeLeft => timeLeft > 0));\n    this.sessionTimer$.subscribe(() => {\n      // Session expired, logout user\n      this.logout();\n    });\n  }\n  logout() {\n    sessionStorage.removeItem('key');\n    sessionStorage.removeItem('taskkey');\n    this.router.navigateByUrl('/login');\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","timer","map","takeWhile","LoginComponent","constructor","http","router","invalidCredential","ngOnInit","loginForm","required","email","minLength","maxLength","login","valid","post","value","responseType","subscribe","next","data","console","log","sessionStorage","setItem","JSON","stringify","parse","getItem","user_id","status","authority","navigateByUrl","error","ClickOnLogin","startSessionTimer","sessionDuration","sessionExpiry","Date","getTime","sessionTimer$","pipe","timeLeft","logout","removeItem","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Purini Tharishith\\Desktop\\project3\\Page\\src\\app\\components\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { timer } from 'rxjs';\nimport { map, takeWhile } from 'rxjs/operators'; \n\n@Component({\n  selector: 'login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  private sessionTimer$: Observable<number>;\n  loginFailed:boolean;\n  firstName : any ;\n  lastName: any;\n  token : any;\n  email: any;\n  user_id:number;\n  loginForm : FormGroup;\n  invalidCredential: boolean =false;\n  constructor(private http: HttpClient,private router : Router){\n\n  }\n  ngOnInit(): void {\n     this.loginForm = new FormGroup({\n       \"email\": new FormControl(null,[Validators.required,Validators.email]),\n       \"password\": new FormControl(null,[Validators.required,Validators.minLength(8),Validators.maxLength(12)])\n     })\n  }\n  \n  public login()\n  { \n    if(this.loginForm.valid){\n    this.http.post(\"http://localhost:8082/api/signin\", this.loginForm.value , {responseType:'json'}).subscribe({\n      next : (data: any) => {\n        console.log(data);\n        this.invalidCredential = false;\n        sessionStorage.setItem('key',JSON.stringify(data));\n        console.log(JSON.parse(sessionStorage.getItem('key')).user_id);\n       if(data.status == true)\n       {\n\n        if(data.authority == \"[USER]\"){\n        // Navigate to the dashboard page\n        this.router.navigateByUrl('/dashboard');\n        }\n        else if(data.authority == \"[ADMIN]\"){\n          this.router.navigateByUrl('/admindashboard');\n        }\n       // this.startSessionTimer();\n       else{\n        this.router.navigateByUrl('/managerdashboard');\n       }\n      }},\n      \n      error:(error : any) => {\n        this.invalidCredential = true;\n      }\n    }\n    );\n  }  \n  }\n  \n  public ClickOnLogin()\n  {  \n    if(this.loginForm.valid){\n    this.login();\n    console.log(this.loginForm);\n    }\n    else{\n      this.invalidCredential=true;\n    }\n  }\n  \n\n  private startSessionTimer(): void {\n    const sessionDuration = 1 * 60 * 1000; // 30 minutes in milliseconds\n    const sessionExpiry = new Date().getTime() + sessionDuration;\n\n    this.sessionTimer$ = timer(0, 1000).pipe(\n      map(() => sessionExpiry - new Date().getTime()),\n      takeWhile(timeLeft => timeLeft > 0)\n    );\n\n    this.sessionTimer$.subscribe(() => {\n      // Session expired, logout user\n      this.logout();\n    });\n  }\n\n    logout(){\n      sessionStorage.removeItem('key');\n      sessionStorage.removeItem('taskkey');\n      this.router.navigateByUrl('/login');\n    }\n\n \n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}