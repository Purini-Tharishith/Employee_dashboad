{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nexport let CreatetaskComponent = class CreatetaskComponent {\n  constructor(fb, http) {\n    this.fb = fb;\n    this.http = http;\n    this.isCreated = false;\n    this.projects = [];\n    this.allUsers = [];\n    this.allEmployee = [];\n  }\n  ngOnInit() {\n    const token = JSON.parse(sessionStorage.getItem('key')).token;\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    this.taskForm = this.fb.group({\n      name: [''],\n      status: [''],\n      assignDate: [''],\n      completionDate: [''],\n      assignedTo: [''],\n      projectId: ['']\n    });\n    this.isCreated = false;\n    this.http.get('http://localhost:8082/api/manager/all/users', {\n      headers,\n      responseType: 'json'\n    }).subscribe({\n      next: data => {\n        this.allEmployee = data;\n      },\n      error: error => {\n        console.error('Error fetching data:', error);\n      }\n    });\n    this.http.get('http://localhost:8083/api/project/all/projects', {\n      headers\n    }).subscribe(response => {\n      console.log(response);\n      this.projects = response;\n      //this.projectslength = response.length;\n    });\n  }\n\n  onSubmit() {\n    // Handle form submission\n    const token = JSON.parse(sessionStorage.getItem('key')).token;\n    const email = JSON.parse(sessionStorage.getItem('key')).email;\n    let body = {\n      \"name\": this.taskForm.value.name,\n      \"status\": this.taskForm.value.status,\n      \"assignedDate\": this.taskForm.value.assignDate,\n      \"completionDate\": this.taskForm.value.completionDate,\n      \"assignedTo\": this.taskForm.value.assignedTo,\n      \"assignedBy\": email,\n      \"projectId\": this.taskForm.value.projectId\n    };\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    this.http.post('http://localhost:8083/api/task/create', body, {\n      headers,\n      responseType: 'json'\n    }).subscribe(response => {\n      console.log(response);\n      this.isCreated = true;\n      this.isCreated = true;\n      setTimeout(() => {\n        this.isCreated = false;\n      }, 3000);\n    });\n    console.log(this.taskForm.value);\n  }\n};\nCreatetaskComponent = __decorate([Component({\n  selector: 'app-createtask',\n  templateUrl: './createtask.component.html',\n  styleUrls: ['./createtask.component.css']\n})], CreatetaskComponent);","map":{"version":3,"names":["Component","HttpHeaders","CreatetaskComponent","constructor","fb","http","isCreated","projects","allUsers","allEmployee","ngOnInit","token","JSON","parse","sessionStorage","getItem","headers","taskForm","group","name","status","assignDate","completionDate","assignedTo","projectId","get","responseType","subscribe","next","data","error","console","response","log","onSubmit","email","body","value","post","setTimeout","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Purini Tharishith\\Desktop\\project3\\Page\\src\\app\\modules\\manager\\createtask\\createtask.component.ts"],"sourcesContent":["import { Component,OnInit  } from '@angular/core';\nimport { FormBuilder,  FormGroup,  Validators } from '@angular/forms';\nimport { HttpClient,HttpHeaders } from '@angular/common/http';\n\n@Component({\n  selector: 'app-createtask',\n  templateUrl: './createtask.component.html',\n  styleUrls: ['./createtask.component.css']\n})\nexport class CreatetaskComponent implements OnInit {\n   \n  taskForm: FormGroup;\n  isCreated= false;\n  constructor(private fb: FormBuilder,private http:HttpClient) {}\n  projects:any[]=[];\n  allUsers:any[]=[];\n  allEmployee:any[]=[];\n  selectedProjectId: number;\n  ngOnInit(): void {\n    const token = JSON.parse(sessionStorage.getItem('key')).token;\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    this.taskForm = this.fb.group({\n      name: ['' ],\n      status: [''],\n      assignDate: [''],\n      completionDate: [''],\n      assignedTo: [''],\n      projectId: ['']\n    });\n    this.isCreated=false;\n   \n  \n      this.http.get('http://localhost:8082/api/manager/all/users', { headers, responseType: 'json' }).subscribe(\n       {next: \n        (data: any) => {\n          this.allEmployee=data;\n          \n        },\n        error:\n        (error) => {\n          console.error('Error fetching data:', error);\n        }\n       } );\n\n\n    this.http.get<any[]>('http://localhost:8083/api/project/all/projects',{headers}).subscribe((response)=>{\n        console.log(response);\n        this.projects = response;\n        //this.projectslength = response.length;\n      })\n  }\n\n  onSubmit() {\n    // Handle form submission\n    const token = JSON.parse(sessionStorage.getItem('key')).token;\n    const email = JSON.parse(sessionStorage.getItem('key')).email;\n\n    let body={\n    \"name\": this.taskForm.value.name,\n    \"status\": this.taskForm.value.status,\n    \"assignedDate\": this.taskForm.value.assignDate,\n    \"completionDate\": this.taskForm.value.completionDate,\n    \"assignedTo\": this.taskForm.value.assignedTo,\n    \"assignedBy\": email,\n    \"projectId\": this.taskForm.value.projectId\n    };\n\n   \n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    this.http.post('http://localhost:8083/api/task/create',body, { headers, responseType: 'json' }).subscribe((response)=>{\n      console.log(response);\n      this.isCreated = true;\n      this.isCreated=true;\n      setTimeout(() => {\n        this.isCreated = false;\n      }, 3000); \n\n    })\n    console.log(this.taskForm.value);\n  }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}