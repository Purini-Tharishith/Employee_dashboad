{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class MasterInterceptor {\n  constructor() {}\n  intercept(request, next) {\n    const allowRequest1 = \"http://localhost:8080/api/v1/auth/signup\";\n    const allowRequest2 = \"http://localhost:8080/api/v1/auth/signin\";\n    if (request.url == allowRequest1 || request.url == allowRequest2) {\n      return next.handle(request);\n    } else {\n      let loggedUserData;\n      let localdata = sessionStorage.getItem('key');\n      if (localdata != null) {\n        loggedUserData = JSON.parse(localdata);\n      }\n      const cloneRequest = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${loggedUserData.token}`\n        }\n      });\n      return next.handle(cloneRequest);\n    }\n  }\n  static #_ = this.ɵfac = function MasterInterceptor_Factory(t) {\n    return new (t || MasterInterceptor)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MasterInterceptor,\n    factory: MasterInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["MasterInterceptor","constructor","intercept","request","next","allowRequest1","allowRequest2","url","handle","loggedUserData","localdata","sessionStorage","getItem","JSON","parse","cloneRequest","clone","setHeaders","Authorization","token","_","_2","factory","ɵfac"],"sources":["C:\\Users\\Purini Tharishith\\Desktop\\project3\\Page\\src\\app\\service\\master.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class MasterInterceptor implements HttpInterceptor {\n\n  constructor() {}\n  \n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n\n    const allowRequest1=\"http://localhost:8080/api/v1/auth/signup\";\n    const allowRequest2=\"http://localhost:8080/api/v1/auth/signin\";\n    if(request.url==allowRequest1 || request.url==allowRequest2){\n      return next.handle(request);\n    }\n    else{\n      let loggedUserData:any;\n    let localdata=sessionStorage.getItem('key');\n    if(localdata!=null){\n      loggedUserData=JSON.parse(localdata);\n    }\n    const cloneRequest=request.clone({\n      setHeaders:{\n        Authorization:`Bearer ${loggedUserData.token}`\n      }\n    })\n    return next.handle(cloneRequest);\n    }\n  }\n}\n"],"mappings":";AAUA,OAAM,MAAOA,iBAAiB;EAE5BC,YAAA,GAAe;EAEfC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IAExD,MAAMC,aAAa,GAAC,0CAA0C;IAC9D,MAAMC,aAAa,GAAC,0CAA0C;IAC9D,IAAGH,OAAO,CAACI,GAAG,IAAEF,aAAa,IAAIF,OAAO,CAACI,GAAG,IAAED,aAAa,EAAC;MAC1D,OAAOF,IAAI,CAACI,MAAM,CAACL,OAAO,CAAC;KAC5B,MACG;MACF,IAAIM,cAAkB;MACxB,IAAIC,SAAS,GAACC,cAAc,CAACC,OAAO,CAAC,KAAK,CAAC;MAC3C,IAAGF,SAAS,IAAE,IAAI,EAAC;QACjBD,cAAc,GAACI,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC;;MAEtC,MAAMK,YAAY,GAACZ,OAAO,CAACa,KAAK,CAAC;QAC/BC,UAAU,EAAC;UACTC,aAAa,EAAC,UAAUT,cAAc,CAACU,KAAK;;OAE/C,CAAC;MACF,OAAOf,IAAI,CAACI,MAAM,CAACO,YAAY,CAAC;;EAElC;EAAC,QAAAK,CAAA,G;qBAxBUpB,iBAAiB;EAAA;EAAA,QAAAqB,EAAA,G;WAAjBrB,iBAAiB;IAAAsB,OAAA,EAAjBtB,iBAAiB,CAAAuB;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}