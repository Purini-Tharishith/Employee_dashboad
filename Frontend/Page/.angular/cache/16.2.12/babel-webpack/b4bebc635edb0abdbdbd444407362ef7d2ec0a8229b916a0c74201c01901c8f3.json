{"ast":null,"code":"import { Chart } from 'chart.js';\nimport * as i0 from \"@angular/core\";\nexport class DefaultDashboardComponent {\n  constructor() {\n    this.labeldata = [];\n    this.taskCounts = {};\n    this.projectCounts = {};\n    this.chartLabels = [];\n    this.chartData = [];\n  }\n  ngOnInit() {\n    // Parse project data from sessionStorage\n    this.chartdata = JSON.parse(sessionStorage.getItem('projectkey'));\n    // Initialize an empty object to store project counts by status\n    this.projectCounts = {\n      COMPLETED: 0,\n      IN_PROGRESS: 0,\n      ON_HOLD: 0\n    };\n    // Loop through each project in chartdata array\n    this.chartdata.forEach(project => {\n      // Increment the count for the corresponding status\n      if (project.status in this.projectCounts) {\n        this.projectCounts[project.status]++;\n      }\n    });\n    // Initialize empty arrays to store chart labels and data\n    this.chartLabels = [];\n    this.chartData = [];\n    // Loop through each status in the projectCounts object\n    Object.keys(this.projectCounts).forEach(status => {\n      // Push the status (e.g., COMPLETED, IN_PROGRESS, ON_HOLD) to chartLabels array\n      this.chartLabels.push(status);\n      // Push the count of projects with this status to chartData array\n      this.chartData.push(this.projectCounts[status]);\n    });\n    // Render the pie chart\n    this.renderPieChart();\n  }\n  renderPieChart() {\n    const ctx = document.getElementById('pieChart');\n    const pieChart = new Chart(ctx, {\n      type: 'pie',\n      data: {\n        labels: this.chartLabels,\n        datasets: [{\n          label: 'Project Status',\n          data: this.chartData,\n          backgroundColor: ['rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(255, 206, 86, 0.5)' // ON_HOLD\n          ],\n\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)'],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    });\n  }\n  static #_ = this.ɵfac = function DefaultDashboardComponent_Factory(t) {\n    return new (t || DefaultDashboardComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DefaultDashboardComponent,\n    selectors: [[\"app-default-dashboard\"]],\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"pieChart\", \"width\", \"400\", \"height\", \"400\"]],\n    template: function DefaultDashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"canvas\", 0);\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Chart","DefaultDashboardComponent","constructor","labeldata","taskCounts","projectCounts","chartLabels","chartData","ngOnInit","chartdata","JSON","parse","sessionStorage","getItem","COMPLETED","IN_PROGRESS","ON_HOLD","forEach","project","status","Object","keys","push","renderPieChart","ctx","document","getElementById","pieChart","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","_","_2","selectors","decls","vars","consts","template","DefaultDashboardComponent_Template","rf","i0","ɵɵelement"],"sources":["C:\\Users\\Purini Tharishith\\Desktop\\project3\\Page\\src\\app\\modules\\manager\\default-dashboard\\default-dashboard.component.ts","C:\\Users\\Purini Tharishith\\Desktop\\project3\\Page\\src\\app\\modules\\manager\\default-dashboard\\default-dashboard.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Chart } from 'chart.js';\n@Component({\n  selector: 'app-default-dashboard',\n  templateUrl: './default-dashboard.component.html',\n  styleUrls: ['./default-dashboard.component.css']\n})\nexport class DefaultDashboardComponent {\n  chartdata : any ;\n  labeldata: any[]=[];\n  taskCounts: any = {};\n  projectCounts : any = {};\n\n  chartLabels = [];\n  chartData = [];\n   \n  ngOnInit(): void {\n    // Parse project data from sessionStorage\n    this.chartdata = JSON.parse(sessionStorage.getItem('projectkey'));\n  \n    // Initialize an empty object to store project counts by status\n    this.projectCounts = {\n      COMPLETED: 0,\n      IN_PROGRESS: 0,\n      ON_HOLD: 0\n    };\n  \n    // Loop through each project in chartdata array\n    this.chartdata.forEach(project => {\n      // Increment the count for the corresponding status\n      if (project.status in this.projectCounts) {\n        this.projectCounts[project.status]++;\n      }\n    });\n  \n    // Initialize empty arrays to store chart labels and data\n    this.chartLabels = [];\n    this.chartData = [];\n  \n    // Loop through each status in the projectCounts object\n    Object.keys(this.projectCounts).forEach(status => {\n      // Push the status (e.g., COMPLETED, IN_PROGRESS, ON_HOLD) to chartLabels array\n      this.chartLabels.push(status);\n      \n      // Push the count of projects with this status to chartData array\n      this.chartData.push(this.projectCounts[status]);\n    });\n  \n    // Render the pie chart\n    this.renderPieChart();\n  }\n  \n  renderPieChart() {\n    const ctx = document.getElementById('pieChart') as HTMLCanvasElement;\n    const pieChart = new Chart(ctx, {\n      type: 'pie',\n      data: {\n        labels: this.chartLabels,\n        datasets: [{\n          label: 'Project Status',\n          data: this.chartData,\n          backgroundColor: [\n            'rgba(255, 99, 132, 0.5)', // COMPLETED\n            'rgba(54, 162, 235, 0.5)', // IN_PROGRESS\n            'rgba(255, 206, 86, 0.5)', // ON_HOLD\n          ],\n          borderColor: [\n            'rgba(255, 99, 132, 1)',\n            'rgba(54, 162, 235, 1)',\n            'rgba(255, 206, 86, 1)',\n          ],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    });\n  }\n}\n  \n","\n<canvas id=\"pieChart\" width=\"400\" height=\"400\"></canvas>\n\n"],"mappings":"AACA,SAASA,KAAK,QAAQ,UAAU;;AAMhC,OAAM,MAAOC,yBAAyB;EALtCC,YAAA;IAOE,KAAAC,SAAS,GAAQ,EAAE;IACnB,KAAAC,UAAU,GAAQ,EAAE;IACpB,KAAAC,aAAa,GAAS,EAAE;IAExB,KAAAC,WAAW,GAAG,EAAE;IAChB,KAAAC,SAAS,GAAG,EAAE;;EAEdC,QAAQA,CAAA;IACN;IACA,IAAI,CAACC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC;IAEjE;IACA,IAAI,CAACR,aAAa,GAAG;MACnBS,SAAS,EAAE,CAAC;MACZC,WAAW,EAAE,CAAC;MACdC,OAAO,EAAE;KACV;IAED;IACA,IAAI,CAACP,SAAS,CAACQ,OAAO,CAACC,OAAO,IAAG;MAC/B;MACA,IAAIA,OAAO,CAACC,MAAM,IAAI,IAAI,CAACd,aAAa,EAAE;QACxC,IAAI,CAACA,aAAa,CAACa,OAAO,CAACC,MAAM,CAAC,EAAE;;IAExC,CAAC,CAAC;IAEF;IACA,IAAI,CAACb,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,SAAS,GAAG,EAAE;IAEnB;IACAa,MAAM,CAACC,IAAI,CAAC,IAAI,CAAChB,aAAa,CAAC,CAACY,OAAO,CAACE,MAAM,IAAG;MAC/C;MACA,IAAI,CAACb,WAAW,CAACgB,IAAI,CAACH,MAAM,CAAC;MAE7B;MACA,IAAI,CAACZ,SAAS,CAACe,IAAI,CAAC,IAAI,CAACjB,aAAa,CAACc,MAAM,CAAC,CAAC;IACjD,CAAC,CAAC;IAEF;IACA,IAAI,CAACI,cAAc,EAAE;EACvB;EAEAA,cAAcA,CAAA;IACZ,MAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAsB;IACpE,MAAMC,QAAQ,GAAG,IAAI3B,KAAK,CAACwB,GAAG,EAAE;MAC9BI,IAAI,EAAE,KAAK;MACXC,IAAI,EAAE;QACJC,MAAM,EAAE,IAAI,CAACxB,WAAW;QACxByB,QAAQ,EAAE,CAAC;UACTC,KAAK,EAAE,gBAAgB;UACvBH,IAAI,EAAE,IAAI,CAACtB,SAAS;UACpB0B,eAAe,EAAE,CACf,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,CAAE;UAAA,CAC5B;;UACDC,WAAW,EAAE,CACX,uBAAuB,EACvB,uBAAuB,EACvB,uBAAuB,CACxB;UACDC,WAAW,EAAE;SACd;OACF;MACDC,OAAO,EAAE;QACPC,UAAU,EAAE,IAAI;QAChBC,mBAAmB,EAAE;;KAExB,CAAC;EACJ;EAAC,QAAAC,CAAA,G;qBAxEUtC,yBAAyB;EAAA;EAAA,QAAAuC,EAAA,G;UAAzBvC,yBAAyB;IAAAwC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,mCAAAC,EAAA,EAAAvB,GAAA;MAAA,IAAAuB,EAAA;QCNtCC,EAAA,CAAAC,SAAA,gBAAwD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}