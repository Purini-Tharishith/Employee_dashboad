{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nexport let ManagerProjectsComponent = class ManagerProjectsComponent {\n  constructor(http) {\n    this.http = http;\n    this.projects = []; // Populate this array with your project data\n    this.updateClicked = false;\n  }\n  ngOnInit() {\n    this.projects = JSON.parse(sessionStorage.getItem('projectkey'));\n  }\n  selectProject(project) {\n    this.selectedProject = project;\n  }\n  updateTaskStatus() {\n    this.updateClicked = true;\n    if (this.selectedProject && this.selectedTaskStatus) {\n      const token = JSON.parse(sessionStorage.getItem('key')).token;\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n      // Iterate over tasks to update status\n      this.selectedProject.tasks.forEach(task => {\n        // Make HTTP POST request to update task status\n        this.http.post(`http://localhost:8083/api/task/status/${task.task_id}`, {\n          status: this.selectedTaskStatus\n        }, {\n          headers\n        }).subscribe(response => {\n          console.log('Task status updated successfully:', response);\n          // Handle response if needed\n        }, error => {\n          console.error('Error updating task status:', error);\n          // Handle error if needed\n        });\n      });\n    } else {\n      console.error('No project selected or task status not selected.');\n      // Handle case where no project is selected or task status is not selected\n    }\n  }\n};\n\nManagerProjectsComponent = __decorate([Component({\n  selector: 'app-manager-projects',\n  templateUrl: './manager-projects.component.html',\n  styleUrls: ['./manager-projects.component.css']\n})], ManagerProjectsComponent);","map":{"version":3,"names":["Component","HttpHeaders","ManagerProjectsComponent","constructor","http","projects","updateClicked","ngOnInit","JSON","parse","sessionStorage","getItem","selectProject","project","selectedProject","updateTaskStatus","selectedTaskStatus","token","headers","tasks","forEach","task","post","task_id","status","subscribe","response","console","log","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Purini Tharishith\\Desktop\\project3\\Page\\src\\app\\modules\\manager\\manager-projects\\manager-projects.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { NgModule } from '@angular/core';\nimport { HttpClient ,HttpHeaders} from '@angular/common/http';\n@Component({\n  selector: 'app-manager-projects',\n  templateUrl: './manager-projects.component.html',\n  styleUrls: ['./manager-projects.component.css']\n})\nexport class ManagerProjectsComponent implements OnInit{\n \n  projects: any[] = []; // Populate this array with your project data\n  updateClicked = false;\n  selectedProject: any;\n  selectedTaskStatus: string;\n \n  constructor(private http : HttpClient) {}\n  ngOnInit(): void {\n    this.projects =  JSON.parse(sessionStorage.getItem('projectkey'));\n  }\n  selectProject(project: any) {\n    this.selectedProject = project;\n  }\n  \n  updateTaskStatus()\n   {  \n    this.updateClicked = true;\n    if (this.selectedProject && this.selectedTaskStatus) {\n      const token = JSON.parse(sessionStorage.getItem('key')).token;\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n\n      // Iterate over tasks to update status\n      this.selectedProject.tasks.forEach(task => {\n        // Make HTTP POST request to update task status\n        this.http.post<any>(`http://localhost:8083/api/task/status/${task.task_id}`, { status: this.selectedTaskStatus }, { headers })\n          .subscribe(\n            (response) => {\n              console.log('Task status updated successfully:', response);\n              // Handle response if needed\n            },\n            (error) => {\n              console.error('Error updating task status:', error);\n              // Handle error if needed\n            }\n          );\n      });\n    } else {\n      console.error('No project selected or task status not selected.');\n      // Handle case where no project is selected or task status is not selected\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAAqBC,WAAW,QAAO,sBAAsB;AAMtD,WAAMC,wBAAwB,GAA9B,MAAMA,wBAAwB;EAOnCC,YAAoBC,IAAiB;IAAjB,KAAAA,IAAI,GAAJA,IAAI;IALxB,KAAAC,QAAQ,GAAU,EAAE,CAAC,CAAC;IACtB,KAAAC,aAAa,GAAG,KAAK;EAImB;EACxCC,QAAQA,CAAA;IACN,IAAI,CAACF,QAAQ,GAAIG,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC;EACnE;EACAC,aAAaA,CAACC,OAAY;IACxB,IAAI,CAACC,eAAe,GAAGD,OAAO;EAChC;EAEAE,gBAAgBA,CAAA;IAEd,IAAI,CAACT,aAAa,GAAG,IAAI;IACzB,IAAI,IAAI,CAACQ,eAAe,IAAI,IAAI,CAACE,kBAAkB,EAAE;MACnD,MAAMC,KAAK,GAAGT,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,KAAK,CAAC,CAAC,CAACM,KAAK;MAC7D,MAAMC,OAAO,GAAG,IAAIjB,WAAW,CAAC;QAC9B,eAAe,EAAE,UAAUgB,KAAK;OACjC,CAAC;MAEF;MACA,IAAI,CAACH,eAAe,CAACK,KAAK,CAACC,OAAO,CAACC,IAAI,IAAG;QACxC;QACA,IAAI,CAACjB,IAAI,CAACkB,IAAI,CAAM,yCAAyCD,IAAI,CAACE,OAAO,EAAE,EAAE;UAAEC,MAAM,EAAE,IAAI,CAACR;QAAkB,CAAE,EAAE;UAAEE;QAAO,CAAE,CAAC,CAC3HO,SAAS,CACPC,QAAQ,IAAI;UACXC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEF,QAAQ,CAAC;UAC1D;QACF,CAAC,EACAG,KAAK,IAAI;UACRF,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;UACnD;QACF,CAAC,CACF;MACL,CAAC,CAAC;KACH,MAAM;MACLF,OAAO,CAACE,KAAK,CAAC,kDAAkD,CAAC;MACjE;;EAEJ;CACD;;AA5CY3B,wBAAwB,GAAA4B,UAAA,EALpC9B,SAAS,CAAC;EACT+B,QAAQ,EAAE,sBAAsB;EAChCC,WAAW,EAAE,mCAAmC;EAChDC,SAAS,EAAE,CAAC,kCAAkC;CAC/C,CAAC,C,EACW/B,wBAAwB,CA4CpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}